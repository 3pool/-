# -*- coding:utf-8 -*-
# 3.全局和局部变量
# 在函数外定义的变量是全局变量
# 在函数内定义的变量是局部变量，只能在定义的范围内使用
def func4():
    a = 1
    # 局部变量，只能在函数中使用
    print(a)

func4()
# print(a)
# 会报错，因为a是在函数中定义的

b = 100  # 全局变量：在整个程序中都可以使用
print('函数外：',b)

def func5():
    print('函数内：',b)
    # 在函数内也可以访问

func5()
print('-'*100)

# 如果在函数内为全局变量赋值会怎样？
c = 200  # 全局变量
print('执行函数前c的值：',c)
print('执行函数前c的内存地址：',id(c))

def func6():
    c = 999
    # 在函数中位全局变量赋值，相当于创建了一个和全局变量同名的局部变量
    print('执行函数时c的值：', c)
    # 访问的是函数中的局部变量c
    print('执行函数时c的内存地址：', id(c))

func6()
print('执行函数后c的值：',c)
print('执行函数后c的内存地址：',id(c))

print('-'*100)
# 用global关键字对函数内的全局变量进行声明

d = 500  # 全局变量
print('函数外：',d)
print('函数外的地址：',id(d))

def func7():
    global d
    # 告诉函数d是函数外构建的全局变量，如果要赋值，就不要再创建一个新的局部变量了
    # 在函数内用global定义过的全局变量才是完全体
    # 本质是可以在函数内修改变量指向的内存地址
    d = -1
    print('函数内：',d)
    print('函数内的地址：',id(d))

func7()
print('函数执行后：', d)
print('函数执行后d的地址：', id(d))

print('-'*100)
# 利用可变对象列表的特征实现伪全局变量

list1 = [1,2,3,4]  # 全局变量
print('函数外：',list1)

def func8():
    list1[0] = 100
    # 修改列表中的元素，修改的是列表的索引指向的内存地址
    print('函数内：',list1)

func8()
print('执行函数后：',list1)
# 因为列表在函数内外都可以针对索引的指针进行修改（列表是可变的容器），所以经常会把列表作为伪全局变量使用